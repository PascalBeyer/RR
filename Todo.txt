Make a good general purpose allocator // done ?
Add occupied and free to the dynamic allocator // should be done, but untested
reenable shadow mapping // done?
do a good StoF, so that we have a better mesh. // done ? (at least for now)
make the meshstruct work like it does in soko? having a vertex pool, an index pool and then have list {start index, amount, materialIndex}? // yes!, and now they do.
Make own mesh format and material format, that respects how the game wants to think of them // done ?
do tileMap editor // done?
somehow the colors of that consoleTextField got mixed up.... it seems that r and b are switched, why no where else? // done?
Make everything an entity, like they have in Sokoban? // no.
Maybe make a catalog system, which looks at whats there on startup // done?
Move to front Asset system? // done?
Make meshes assets again. // done?
grid positions and offsets // done?
move the main render loop into each state. // done?
linear array of events waiting for results, i.e. spawned bock, waiting for put into goal. // done?
do actual level in path creator, and just render the "Level" (constant, that we load from) // done?
progress bar // done?
detect whether or not a in the path creator suggested move is possible. // done?
escape to close console. // done?
we could do it so you can pass in NULL instead of exe, so the path creator does not need to know. // done?
FIX EDITOR PASTE + MAKE EDITOR ARROW KEYS BE DEPENDEndent on cam direction. // done?
sting allinement in FormatString. // done?
add Blocks needed to level //done
add starting cam pos to level // done?
We need to handle dt of more then one cycle at some point // done?
We could go from a "tileMap" system to a "traversables" system? // kinda done, we check support
remove entity serials ? // wwhat no!
we could just make that be the switch. // done, in the setup.
let the user specify the granuality at which he wants to switch the setup. // done?
make World -> EntityManager? // done?
Loading and saving skeletons // done ? 
Loading and saving animations // done?
make animations assets. // done?
OpenGL stuff, i.e rendering it on the hardware // done?
how to handle setup.projection, it seems it will _always_ be the same, but either orthogonal or projective...  // done?
Newly added assets should go into the asset system, not sure how. // done?
Asset system has to handle materials. // no, well maybe
reduce api calls in opengl // done?
save (crtl-s) //done?
camera for tilemap editor //done ?
make us able to shift click to remove, if already in selection // done?
multi select // done?
copy paste // done?
undo, redo, // done?
paste of rows // done ?
make the cancel work off of the undo system, once it is in place // no, undo relies on this
rotations // will do if animations
interpolation // done?
undoing path // done?
win // done?
maybe simulate to x while making path for x (in alpha?) // done?
UI stuff // done?
falling // done?
dying  // should this exist ? // insome sense done?
render numbers in path //done ?
clear, and let cubes fall, that go of the stage. // done?
QuatTree for Entity phisical stuff? // done?
carrying does not work, as its kind of a hack. // done?
stones jump to interpolation offset, and somehow look really ugly... // done?
units should stop in pathcreator mode, maybe I should not check for collision, and just let eveything go to shit in the execute. that sounds fun // done?
do we have initiative? does stuff bump into each other and then back? I like that, that should look really "errory / errorish / ???" // done?
probably make the tree update based on create / restore / delete calls // done?
XForm states : GetFromMatrix in jBlow: Animation Playback part 2 37 min. // done?
reset frame arena after preload? // done?
clear flags in the begining, but do the sim at the end? // done?
make stuff save InterpolationData // done?
shift click for multi walk / control for unit select // done? does not feel that good
Undo data for game, so we can play in both directions, maybe the events are enought? // no, done.
ctime // done ?
check that convertNewAssets is not leaking // done ?
make a DynamicFlags entry in the Entity flags enum, which is just all of them or ed together // we have EntityFlag_FrameResetFlag now, so done?
add lightPos to the level // done?
we were just making AssetTypes.h continue that. // done
right now It feels like levels are baked in things, we need to untangle that e.g. remove entityManager from LoadLevel.// done?
make levels assets, // for now they are not, as i do not see the purpose
save level helper does not work right now. //done?
make DrawEntityAABB // done?
LoadLevelHelper should call GetLevel(AssetHandler *assetHandler, String name); // done ? sort of
make sure all Editor actions have the serial // done?
UndoRedo has error with scale pushing one even if nothing selected // done?
move the camera out of the entity manager // done?
the whole what gameState are we in situation should be way clearer // done?
make editorEntities just globalAlloc and stay forever. // done?
at this point I think the best way to do this is to build a general purpose allocator for the current state. // done?
panel should hide forever if tab was pressed and then only come back with tab // done?
rethink how the snap to tilemap system works // done?
direction keys do not record undos right now. // done?
get rid of most/all dynamic allocations in AssetLoading // done?
when exactly do we call resetEntity tree.// noone!
make font into asset, would also make the draw String call way better, also solves the problem where I do not currently know where it is supposed to be stored // done?
figure out a way to detect changes to the render setup, so we can reduce API calls. // done?
make a find shader thing that matches the flags and the returns a shader that fits the job. //done?
maybe rendersetup should have the shader...., because I have to repeat myself alot right now in opengl // done?
todo  make PushRenderSetup have optional lightsource. // done?
Animation player (save in skeleton?, save in world?) // entityManager


// RANDOM NOTES:
when we actually decide, that we only have blocks and dudes, we know that only dudes are dynmic, so the unitArray could just be static and openended.
get rid of meshes having color? lighting should go into a seperate buffer that stores those colors
I had the pathCreator render the tiles in black, and it looked quite sweet.

Asset:
Get PNG loader
animationInfo in assethandler

Tweekers:
make tweek search the file, if no loaded tweeker variable is found. maybe write out the tweekerfile instead of writing out all tweeker values.
make tweeker work based on filenames as well I.e. tweek editor meshSelectColor instead of having to use editorMeshSelectColor
maybe load all tweekers on startup?
seperate tweekers from debug completly
fix the verbose tweeker hack that load the file everytime we write

OpenGL:
associating data to triangles, to open gl... like normals.
figure out how to let buffers of differant multisample counts interact.

MISC:
render strings leftbound
look at tempoary memory system.
upscale bmps
string.h memcpy

DEBUG:
make debug Ui for amount of memory used.
make frame bar zoomable
make DEBUG an actually usable flag, which compiles out the console, editor and such

EDITOR : 
double click = 'numpad .'
box select
make the orbiting more of a always usable flag, maybe just a bool.
how do you bright up colors? (brightness/ negative colors?)
make the panel load its values dynamically

Execute:
speed meter
redo lighting, kd-tree for AABB's? make it just 4 u16 per triangle and work with the old system?

Animation:
do weight averageing in the loading.
I feel like skeletons and meshes should be parralel. And so should bones and bone names

we should probably make initEntityManager and load level one call
GetHotEntity should use the entity tree. Not sure what acturally uses that anyway...
maybe make arenas be on the things, so we do not have too visit 2 pointers.

tocheck wheather on cam do project and check intersection with unit cube.

lets do exactly what the dude does. 
->accelerationTilt.
->2 keyFrame static move animation. // i.e foot matching.
->2 differant speeds, that we interpolate
->bonces that depend on speed.
->interpolate between keyframes, bicubic.
->crouch spring damper
->IK
->forses on parts of his body
->posematching (ragdoll)

my current 'renderCode' is in entity.h "GetRenderPos"

GetRenderpos does nothing
Right now the cleanest seems to ignore the usual entity data and just manipulate the root bone...
we are not considering the "node" that the mesh has right not.... I think this only matters for the bind shape?

Probably make orthogonal stuff its own pass?
kinda feels like Editor wants to have its own concept of entity at this point....